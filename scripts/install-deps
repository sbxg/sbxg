#! /usr/bin/env python3
#
# Copyright (c) 2016, Jean Guyomarc'h <jean@guyomarch.bzh>
#
# This file is part of SBXG
#
# SBXG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SBXG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SBXG.  If not, see <http://www.gnu.org/licenses/>.

import platform
import sys
import subprocess

# Linux is required
if sys.platform != "linux":
    print("*** OS is not Linux!", file=sys.stderr)
    sys.exit(1)

# Get the distribution identifier (e.g. arch, debian)
VERSION = platform.linux_distribution()[0]

# Table that contains commands to be run, for each distribution
# Keys MUST EXACTLY MATCH the VERSION variable.
COMMANDS = {
    "arch": [
        "pacman -S extra/git",
        "pacman -S core/sudo",
        "pacman -S core/make",
        "pacman -S community/repo",
        "pacman -S extra/cmake",
        "pacman -S extra/qemu",
        "pacman -S extra/qemu-arch-extra",
        "yaourt -S aur/qemu-user-static",
        "pacman -S community/debootstrap",
        "yaourt -S aur/multipath-tools",
        "pacman -S core/ncurses",
        "pacman -S extra/parted",
        "yaourt -S aur/binfmt-qemu-static",
        "yaourt -S aur/binfmt-support",
        "pacman -S core/gcc",
        "pacman -S community/arm-none-eabi-gcc",
    ],
    "debian": [
        "apt-get install -y autoconf",
        "apt-get install -y build-essential",
        "apt-get install -y make",
        "apt-get install -y automake",
        "apt-get install -y qemu-user-static",
        "apt-get install -y qemu",
        "apt-get install -y cmake",
        "apt-get install -y binfmt-support",
        "apt-get install -y git",
        "apt-get install -y kernel-package",
        "apt-get install -y u-boot-tools",
        "apt-get install -y sudo",
        "apt-get install -y debootstrap",
        "apt-get install -y parted",
        "apt-get install -y kpartx",
        "apt-get install -y libncurses5-dev",
        "apt-get install -y python3.4",
    ]
}

if VERSION in COMMANDS:
    # If the distrubtion is supported, process the commands
    cmdlist = COMMANDS[VERSION]
    for cmd in cmdlist:
        # Pretty log to remind what we are running
        print("-> {}".format(cmd))

        # Run the command. Let it be a shell command, that's too difficult
        # or cumbersome to convert the command in a list of parameters, because
        # of whitespaces.
        # If the process fails, gracefully fail.
        try:
            subprocess.check_call(cmd, shell=True)
        except subprocess.CalledProcessError as err:
            print("*** {}".format(err), file=sys.stderr)
            sys.exit(127)
else:
    # Unsupported version. Grecefully fail.
    print("*** There is no support for {}".format(VERSION), file=sys.stderr)
    sys.exit(1)
