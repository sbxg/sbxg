{# Copyright (c) 2017, 2019 Jean Guyomarc'h
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 #
 #
 # NOTE: THE GENERATED FILE DOES NOT FALL UNDER THIS LICENSE
-#}

# This file has been generated by SBXG ########################################

{#- ##########################################################################
 # dl_stamp(obj)
 #
 # Expands to the make variable that contains the stamp file to be generated
 # once the component has been downloaded and extracted.
 #############################################################################}
{%- macro dl_stamp(obj) %}$(toolchain_dl_stamp) $({{ obj.download }}_dl_stamp){% endmacro %}

{#- ##########################################################################
 # linux_make(linux, target)
 #
 # Run 'target' inside linux's build directory, effectively calling make with
 # the appropriate variables and arguments
 #############################################################################}
{%- macro linux_make(linux, target) -%}
$(MAKE){% if toolchain.arch %} ARCH={{ toolchain.arch }} CROSS_COMPILE=$(TOOLCHAIN)
       {%- endif %} O=$(LINUX_{{ linux.name }}_BUILD_DIR) -C {{ linux.path }} {{ target }}
{%- endmacro %}

{#- ##########################################################################
 # uboot_make(uboot, target)
 #
 # Run 'target' inside uboot's build directory, effectively calling make with
 # the appropriate variables and arguments
 #############################################################################}
{%- macro uboot_make(uboot, target) -%}
$(MAKE){% if toolchain.arch %} ARCH={{ toolchain.arch }} CROSS_COMPILE=$(TOOLCHAIN)
       {%- endif %} O=$(UBOOT_{{ uboot.name }}_BUILD_DIR) -C {{ uboot.path }} {{ target }}
{%- endmacro %}

{#- ##########################################################################
 # xen_make(xen, target)
 #
 # Run 'target' inside xen's build directory, effectively calling make with
 # the appropriate variables and arguments
 #############################################################################}
{%- macro xen_make(xen, target) -%}
$(MAKE) {% if toolchain.arch -%}
  XEN_TARGET_ARCH={{ toolchain.xen_arch }} CROSS_COMPILE=$(TOOLCHAIN)
     {%- endif %} -C {{ xen.path }} {{ target }}
{%- endmacro %}

{%- macro gen_default_rules(components, name) %}
  {% if components %}
.PHONY: all-{{ name }}

all-{{ name }}:{% for comp in components %} {{ comp.name }}{% endfor %}
  {%- endif %}
{%- endmacro %}


V ?= 1

ifeq ($(V),0)
  CURL_OPTS := -Ss
  Q := @
else
  CURL_OPTS :=
  Q :=
endif

# Disable built-in rules.
.SUFFIXES:

.PHONY: all

all:
{%- if linuxes %} all-linux {%- endif -%}
{%- if uboots %} all-uboot {%- endif -%}
{%- if xens %} all-xen {%- endif -%}


###############################################################################
# Targets to download the various external components
###############################################################################
{%- for download in downloads %}

{{ download.name }}_dl_stamp := {{ top_build_dir }}/stamps/{{ download.name }}

$({{ download.name }}_dl_stamp): {{ top_build_dir }}/downloads/{{ download.archive }}
	tar -xf $<
	@mkdir -p {{ top_build_dir }}/stamps
	@echo "{{ download.url }}" > $@

{{ top_build_dir }}/downloads/{{ download.archive }}:
	@mkdir -p {{ top_build_dir }}/downloads
	cd {{ top_build_dir }}/downloads && curl $(CURL_OPTS) -O "{{ download.url }}"
{%- endfor %}

{% if toolchain.arch %}
# Cross-compiling #############################################################
TOOLCHAIN := {{ top_build_dir }}/{{ toolchain.path }}/{{ toolchain.prefix }}
{%- else %}
# Using a native gcc toolchain ################################################
toolchain_dl_stamp :=
{%- endif %}

{#############################################################################
 # Generation of the targets that allow to compile the different linuxes
 #############################################################################}
{% for linux in linuxes %}

###############################################################################
# linux Targets: {{ linux.name }}
###############################################################################

LINUX_{{ linux.name }}_BUILD_DIR := {{ top_build_dir }}/build_{{ linux.name }}
LINUX_{{ linux.name }}_CONFIG := $(LINUX_{{ linux.name }}_BUILD_DIR)/.config
DTC := $(LINUX_{{ linux.name }}_BUILD_DIR)/scripts/dtc/dtc

.PHONY: {{ linux.name }} {{ linux.name }}-%

$(LINUX_{{ linux.name }}_CONFIG): {{ linux.config }} {{ dl_stamp(linux) }}
	$(Q)mkdir -p $(LINUX_{{ linux.name }}_BUILD_DIR)
	$(Q)cp -u $< $@

$(DTC): {{ dl_stamp(linux) }}
	+{{ linux_make(linux, 'scripts/dtc/') }}

{{ linux.name }}-%: $(LINUX_{{ linux.name }}_CONFIG) {{ dl_stamp(linux) }}
	+{{ linux_make(linux, '$(patsubst ' ~ linux.name ~ '-%,%,$@)') }}

{{ linux.name }}: $(LINUX_{{ linux.name }}_CONFIG) {{ dl_stamp(linux) }}
	+{{ linux_make(linux, 'all') }}

{% endfor %}{# End of linux #}
{{ gen_default_rules(linuxes, 'linux') }}


{#############################################################################
 # Generation of the targets that allow to compile the different bootloaders
 #############################################################################}
{% for uboot in uboots %}

###############################################################################
# U-Boot Targets: {{ uboot.name }}
###############################################################################

UBOOT_{{ uboot.name }}_BUILD_DIR := {{ top_build_dir }}/build_{{ uboot.name }}
UBOOT_{{ uboot.name }}_CONFIG := $(UBOOT_{{ uboot.name }}_BUILD_DIR)/.config

.PHONY: {{ uboot.name }} {{ uboot.name }}-%

$(UBOOT_{{ uboot.name }}_CONFIG): {{ uboot.config }} {{ dl_stamp(uboot) }}
	$(Q)mkdir -p $(UBOOT_{{ uboot.name }}_BUILD_DIR)
	$(Q)cp -u $< $@

{{ uboot.name }}-%: $(UBOOT_{{ uboot.name }}_CONFIG) {{ dl_stamp(uboot) }}
	+{{ uboot_make(uboot, '$(patsubst ' ~ uboot.name ~ '-%,%,$@)') }}

{{ uboot.name }}: $(UBOOT_{{ uboot.name }}_CONFIG) {{ dl_stamp(uboot) }}
	+{{ uboot_make(uboot, 'all') }}


{% endfor %}{# End of Uboot #}
{{ gen_default_rules(uboots, 'uboot') }}



{#############################################################################
 # Generation of the targets that allow to compile the different hypervisors
 #############################################################################}
{% for xen in xens %}

###############################################################################
# Xen Targets: {{ xen.name }}
###############################################################################

XEN_{{ xen.name }}_BUILD_DIR := {{ top_build_dir }}/build_{{ xen.name }}
XEN_{{ xen.name }}_CONFIG := $(XEN_{{ xen.name }}_BUILD_DIR)/.config

.PHONY: {{ xen.name }} {{ xen.name }}-%

$(XEN_{{ xen.name }}_CONFIG): {{ xen.config }} {{ dl_stamp(xen) }}
	$(Q)cp -r {{ top_build_dir }}/{{ xen.path }} $(XEN_{{ xen.name }}_BUILD_DIR)
{%- if toolchain.arch %}
	PATH="{{ top_build_dir }}/{{ toolchain.path }}/{{ toolchain.prefix | dirname }}:$$PATH" \
{%- endif %}
	cd "$(XEN_{{ xen.name }}_BUILD_DIR)" && ./configure \
{%- if toolchain.arch %}
		--host="{{ toolchain.host }}" \
{%- endif %}
		--disable-docs --disable-tools --enable-xen
	$(Q)cp -u $< $@

{{ xen.name }}-%: $(XEN_{{ xen.name }}_CONFIG) {{ dl_stamp(xen) }}
	+{{ xen_make(xen, '$(patsubst ' ~ xen.name ~ '-%,%,$@)') }}

{{ xen.name }}: $(XEN_{{ xen.name }}_CONFIG) {{ dl_stamp(xen) }}
	+{{ xen_make(xen, '') }}

{% endfor %}{# End of Xen #}
{{ gen_default_rules(xens, 'xen') }}


###############################################################################
# Miscellaneous Targets
###############################################################################

.PHONY: help

{%- macro gen_help_for(list, name) %}
  {%- if list %}
	@echo "* all-{{ name }}"
	@echo "\t\t\t\tbuild all the instances of {{ name }}"
  {%- endif %}
  {%- for comp in list %}
	@echo "* {{ comp.name }}"
	@echo "\t\t\t\tbuild the {{ name }} {{ comp.name }}"
	@echo "* {{ comp.name }}-<cmd>"
	@echo "\t\t\t\trun <cmd> for {{ comp.name }}"
  {%- endfor %}
{%- endmacro %}

help:
	@echo "==== Available Targets ===="
	@echo
	@echo "* all"
	@echo "\t\t\t\tbuild all available targets"
	@echo "* help"
	@echo "\t\t\t\tdisplay this message"
	@echo
{{- gen_help_for(linuxes, 'linux') }}
{{- gen_help_for(uboots, 'uboot') }}
{{- gen_help_for(xens, 'xen') }}
