{# Copyright (c) 2017, 2019 Jean Guyomarc'h
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 #
 #
 # NOTE: THE GENERATED FILE DOES NOT FALL UNDER THIS LICENSE
-#}
# This file has been generated by SBXG ########################################

{#- Start by importing the global macros, that are used to generate most of
 #  the generic Makefile. It is important to keep the context, since these
 #  macros are likely to manipulate the toolchain or other globals #}
{%- import 'macros.j2' as macros with context %}


{%- macro gen_default_rules_for(components, name) %}
  {% if components %}
.PHONY: all-{{ name }}

all-{{ name }}:{% for comp in components %} {{ comp.name }}{% endfor %}
  {%- endif %}
{%- endmacro %}


V ?= 1

ifeq ($(V),0)
  CURL_OPTS := -Ss
  Q := @
else
  CURL_OPTS :=
  Q :=
endif

# Disable built-in rules.
.SUFFIXES:

# By default, we run the 'all' target.
.DEFAULT_GOAL: all

PHONY = all all-dl

ALL_TARGETS =
  {%- if linuxes %} all-linux {%- endif -%}
  {%- if uboots %} all-uboot {%- endif -%}
  {%- if xens %} all-xen {%- endif %}

ALL_DL_TARGETS =
  {%- for download in downloads %} $({{ download.name }}_dl_stamp){% endfor %}



###############################################################################
# Targets to download the various external components
###############################################################################
{%- for download in downloads %}

{{ download.name }}_dl_stamp := {{ top_build_dir }}/stamps/{{ download.name }}

$({{ download.name }}_dl_stamp): {{ top_build_dir }}/downloads/{{ download.archive }}
	tar -xf $<
	@mkdir -p {{ top_build_dir }}/stamps
	@echo "{{ download.url }}" > $@

{{ top_build_dir }}/downloads/{{ download.archive }}:
	@mkdir -p {{ top_build_dir }}/downloads
	cd {{ top_build_dir }}/downloads && curl -L $(CURL_OPTS) -O "{{ download.url }}"
{%- endfor %}

{% if toolchain.arch %}
# Cross-compiling #############################################################
TOOLCHAIN := {{ top_build_dir }}/{{ toolchain.path }}/{{ toolchain.prefix }}
{%- else %}
# Using a native gcc toolchain ################################################
toolchain_dl_stamp :=
{%- endif %}


{#############################################################################
 # Generation of the targets that allow to compile the different linuxes
 #############################################################################}
{% for linux in linuxes %}
{{ macros.gen_targets_for_linux(linux, top_build_dir) }}
{% endfor %}
{{ gen_default_rules_for(linuxes, 'linux') }}

{#############################################################################
 # Generation of the targets that allow to compile the different bootloaders.
 # Note that if we have already built a Linux kernel, we will use its DTC
 # as the device tree compiler that U-Boot should use. Otherwise, we expect
 # a device tree compiler to be present in the PATH.
 #############################################################################}
{%- if linuxes %}
DTC := $(LINUX_{{ linuxes[0].name }}_DTC)
{%- else %}
DTC := dtc
{%- endif %}
{% for uboot in uboots %}
{{ macros.gen_targets_for_uboot(uboot, top_build_dir) }}
{% endfor %}
{{ gen_default_rules_for(uboots, 'uboot') }}


{#############################################################################
 # Generation of the targets that allow to compile the different hypervisors
 #############################################################################}
{% for xen in xens %}
{{ macros.gen_targets_for_xen(xen, top_build_dir) }}
{% endfor %}{# End of Xen #}
{{ gen_default_rules_for(xens, 'xen') }}


{% if board %}
###############################################################################
# Rootfs Download
###############################################################################
rootfs_dl_stamp := {{ top_build_dir }}/stamps/rootfs

$(rootfs_dl_stamp):
	@mkdir -p $(GENIMAGE_INDIR)
	cd $(GENIMAGE_INDIR) && curl -L $(CURL_OPTS) -O "{{ board.rootfs_url }}"
	@echo "{{ board.rootfs_url }}" > $@


###############################################################################
# Genimage Targets
###############################################################################

GENIMAGE_ROOTDIR := {{ top_build_dir }}/.genimage-root
GENIMAGE_TMPDIR := {{ top_build_dir }}/.genimage-tmp
GENIMAGE_OUTDIR := {{ top_build_dir }}/images
GENIMAGE_INDIR := $(GENIMAGE_OUTDIR)
GENIMAGE_BUILD_DIR := {{ top_build_dir }}/build_{{ genimage.path }}
GENIMAGE := $(GENIMAGE_BUILD_DIR)/genimage

$(GENIMAGE): $(genimage_dl_stamp)
	mkdir -p $(GENIMAGE_BUILD_DIR)
	cd $(GENIMAGE_BUILD_DIR) && {{ top_build_dir }}/{{ genimage.path }}/configure
	+$(MAKE) -C $(GENIMAGE_BUILD_DIR) genimage

genimage: $(GENIMAGE)

###############################################################################
# Bootscript Generation
###############################################################################
bootscript: $(GENIMAGE_INDIR)/bootscript.bin

MKIMAGE := $(UBOOT_{{ uboots[0].name }}_MKIMAGE)

$(GENIMAGE_INDIR)/bootscript.bin: {{ top_build_dir }}/bootscript.txt $(MKIMAGE)
	mkdir -p $(GENIMAGE_INDIR)
	$(MKIMAGE) -C none -T script -d $<
          {%- if toolchain.arch %} -A {{ toolchain.arch }}{% endif %} $@


###############################################################################
# Image Generation
###############################################################################

LINUX_IMAGE := $(LINUX_{{ linuxes[0].name }}_BUILD_DIR)/arch/arm/boot/{{ board.linux_image }}
LINUX_DTB := $(LINUX_{{ linuxes[0].name }}_BUILD_DIR)/arch/arm/boot/dts/{{ board.linux_dtb }}
UBOOT_IMAGE := $(UBOOT_{{ uboots[0].name }}_BUILD_DIR)/{{ board.uboot_image }}

image: $(GENIMAGE_INDIR)/bootscript.bin $(GENIMAGE) $(rootfs_dl_stamp)
	+$(MAKE) $(LINUX_{{ linuxes[0].name }}_CONFIG)
	+{{ macros.linux_make(linuxes[0], board.linux_image) }}
	+{{ macros.linux_make(linuxes[0], 'dtbs') }}
	+$(MAKE) $(UBOOT_{{ uboots[0].name }}_CONFIG)
	+{{ macros.uboot_make(uboots[0], 'all') }}
	cp -u $(LINUX_IMAGE) $(GENIMAGE_INDIR)
	cp -u $(LINUX_DTB) $(GENIMAGE_INDIR)
	cp -u $(UBOOT_IMAGE) $(GENIMAGE_INDIR)
	mkdir -p $(GENIMAGE_ROOTDIR) $(GENIMAGE_TMPDIR) $(GENIMAGE_OUTDIR)
	$(GENIMAGE) --outputpath $(GENIMAGE_OUTDIR) --inputpath $(GENIMAGE_INDIR) \
                    --rootpath $(GENIMAGE_ROOTDIR) --tmppath $(GENIMAGE_TMPDIR) \
                    --config {{ top_build_dir }}/genimage.cfg

PHONY += genimage bootscript image
ALL_TARGETS += genimage bootscript image
ALL_DL_TARGETS += $(rootfs_dl_stamp)
{% endif %}


###############################################################################
# Miscellaneous Targets
###############################################################################

.PHONY: help

{%- macro gen_help_for(list, name) %}
  {%- if list %}
	@echo "* all-{{ name }}"
	@echo "\t\t\t\tbuild all the instances of {{ name }}"
  {%- endif %}
  {%- for comp in list %}
	@echo "* {{ comp.name }}"
	@echo "\t\t\t\tbuild the {{ name }} {{ comp.name }}"
	@echo "* {{ comp.name }}-<cmd>"
	@echo "\t\t\t\trun <cmd> for {{ comp.name }}"
  {%- endfor %}
{%- endmacro %}

help:
	@echo "==== Available Targets ===="
	@echo
	@echo "* all"
	@echo "\t\t\t\tbuild all available targets"
	@echo "* all-dl"
	@echo "\t\t\t\tDownloads all components, without building any"
	@echo "* help"
	@echo "\t\t\t\tdisplay this message"
	@echo
{{- gen_help_for(linuxes, 'linux') }}
{{- gen_help_for(uboots, 'uboot') }}
{{- gen_help_for(xens, 'xen') }}

all: $(ALL_TARGETS)
all-dl: $(ALL_DL_TARGETS)
PHONY: $(PHONY)
