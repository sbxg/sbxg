{# Copyright (c) 2017, 2019 Jean Guyomarc'h
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
-#}

# This file has been generated by SBXG ########################################

V ?= 0

ifeq ($(V),0)
  CURL_OPTS := -Ss
  Q := @
else
  CURL_OPTS :=
  Q :=
endif

# Disable built-in rules.
.SUFFIXES:

.PHONY: all

all:
{%- if kernel %} kernel {%- endif -%}
{%- if uboot %} uboot {%- endif -%}

{%- if toolchain.arch %}

###############################################################################
# Toolchain Targets (Cross-Compilation)
###############################################################################

TOOLCHAIN := {{ top_build_dir }}/{{ toolchain.path }}/{{ toolchain.prefix }}
TOOLCHAIN_DL_STAMP := {{ top_build_dir }}/.{{ toolchain.path }}.stamp

{{ top_build_dir }}/{{ toolchain.archive }}:
	curl $(CURL_OPTS) -O "{{ toolchain.url }}"

$(TOOLCHAIN_DL_STAMP): {{ top_build_dir }}/{{ toolchain.archive }}
	tar -xf $<
	$(Q)touch $@

{%- else %}

# Using a native gcc toolchain.
TOOLCHAIN_DL_STAMP :=
{%- endif %}

{% if kernel %}

###############################################################################
# Kernel Targets
###############################################################################

KERNEL_BUILD_DIR := {{ top_build_dir }}/build_{{ kernel.path }}
KERNEL_CONFIG := $(KERNEL_BUILD_DIR)/.config
KERNEL_DIR := {{ top_build_dir }}/{{ kernel.path }}
KERNEL_DL_STAMP := {{ top_build_dir }}/.{{ kernel.path }}.stamp
DTC := $(KERNEL_BUILD_DIR)/scripts/dtc/dtc

# Run make from Linux sources.
# $(1): Target(s) name(s) to be called
linux-make-helper = \
	$(MAKE) \
{%- if toolchain.arch %}
	ARCH="{{ toolchain.arch }}" \
	CROSS_COMPILE=$(TOOLCHAIN) \
{%- endif %}
	O=$(KERNEL_BUILD_DIR) \
	-C "{{ kernel.path }}" \
        $(1)

.PHONY: kernel

$(KERNEL_CONFIG): {{ kernel.config }} $(KERNEL_DL_STAMP)
	@echo "[SBXG/kernel] Setting-up kernel with '$<'"
	$(Q)mkdir -p $(KERNEL_BUILD_DIR)
	$(Q)cp -u $< $@

$(DTC): $(KERNEL_DL_STAMP)
	@echo "[SBXG/kernel] Compiling the Device Tree Compiler"
	+$(call linux-make-helper,scripts/dtc/)

kernel-%: $(KERNEL_CONFIG) $(TOOLCHAIN_DL_STAMP)
	+$(call linux-make-helper,$(patsubst linux-%,%,$@))

kernel: $(KERNEL_CONFIG) $(TOOLCHAIN_DL_STAMP)
	+$(call linux-make-helper,all)

{{ top_build_dir }}/{{ kernel.archive }}:
	curl $(CURL_OPTS) -O "{{ kernel.url }}"

$(KERNEL_DL_STAMP): {{ top_build_dir }}/{{ kernel.archive }}
	tar -xf $<
	$(Q)touch $@

{% endif %}{## End of Kernel ##}

{%- if uboot %}

###############################################################################
# U-Boot Targets
###############################################################################

# Run make from U-Boot sources.
# $(1): Target(s) name(s) to be called
uboot-make-helper = \
	$(MAKE) \
{%- if kernel %}
        DTC="$(DTC)" \
{%- endif %}
{%- if toolchain.arch %}
	CROSS_COMPILE=$(TOOLCHAIN) \
{%- endif %}
	O="{{ uboot.build_dir }}" \
	-C "{{ uboot.path }}" \
	$(1)

.PHONY: uboot uboot-%

UBOOT_IMAGE := {{ uboot.build_dir }}/{{ board.uboot_image }}

uboot-%:
	+$(call uboot-make-helper,$(patsubst uboot-%,%,$@))

uboot: $(DTC) $(UBOOT_IMAGE)

$(UBOOT_IMAGE): $(DTC)
	@echo "[SBXG/uboot] Building u-boot"
	mkdir -p "{{ uboot.build_dir }}"
	cp -u "{{ uboot.config }}" "{{ uboot.build_dir }}/.config"
	+$(call uboot-make-helper,all)
{% endif %}


###############################################################################
# Miscellaneous Targets
###############################################################################

.PHONY: help

help:
	@echo "============= SBXG Build Targets ============="
	@echo
	@echo "all           build all available targets"
{%- if uboot %}
	@echo "uboot         build the bootloader"
	@echo "uboot-<cmd>   run the <cmd> target in U-Boot"
{%- endif %}
{%- if kernel %}
	@echo "kernel        build the kernel"
	@echo "kernel-<cmd>  make the kernel's Makefile run the <cmd> target"
{%- endif %}
