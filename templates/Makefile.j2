# Copyright (c) 2017 Jean Guyomarc'h
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# This is a generated file.

.PHONY: all

all:
{%- if kernel %} kernel {%- endif -%}
{%- if uboot %} uboot {%- endif -%}
{%- if busybox %} busybox {%- endif -%}
{%- if xen %} xen {%- endif -%}
{%- if genimage %} genimage {%- endif -%}
{%- if guests %} guests guests-genimage {%- endif %}

#==============================================================================#
#                                Kernel Targets                                #
#==============================================================================#
{% if kernel %}
# Run make from Linux sources.
# $(1): Target(s) name(s) to be called
# $(2): Path to the Linux sources
# $(3): Path to the Linux build directory
linux-make-helper = \
	$(MAKE) \
{%- if kernel.toolchain %}
	ARCH="{{ kernel.toolchain.arch }}" \
	CROSS_COMPILE="{{ kernel.toolchain.path }}/{{ kernel.toolchain.prefix }}" \
{%- endif %}
	O=$(3) \
	-C $(2) \
        $(1)

{% if kernel.type == "linux" %}
.PHONY: linux linux-%

KERNEL_IMAGE := {{ kernel.build_dir }}/arch/{{ kernel.arch }}/boot/{{ board.linux_image }}
KERNEL_DTB := {{ kernel.build_dir }}/arch/{{ kernel.arch }}/boot/dts/{{ board.linux_dtb }}

{{ kernel.build_dir }}/scripts/dtc/dtc: $(KERNEL_IMAGE)

linux-%:
	+$(call linux-make-helper,$(patsubst linux-%,%,$@),"{{ kernel.path }}","{{ kernel.build_dir }}")

linux: $(KERNEL_IMAGE)

$(KERNEL_IMAGE):
	@echo "[SBXG/kernel] Building Linux kernel"
	mkdir -p "{{ kernel.build_dir }}"
	cp -u "{{ kernel.config }}" "{{ kernel.build_dir }}/.config"
	+$(call linux-make-helper,all,"{{ kernel.path }}","{{ kernel.build_dir }}")
{% endif %}

{% if xen %}

# Run make from Xen sources.
# $(1): Target(s) name(s) to be called
xen-make-helper = \
	$(MAKE) \
{%- if xen.toolchain %}
	CROSS_COMPILE="{{ xen.toolchain.path }}/{{ xen.toolchain.prefix }}" \
	XEN_TARGET_ARCH="{{ xen.toolchain.xen_arch }}" \
{%- endif %}
	-C "{{ xen.path }}/xen" \
	$(1)


.PHONY: xen xen-%

xen-%:
	+$(call xen-make-helper,$(patsubst xen-%,%,$@))

XEN_IMAGE := {{ xen.path }}/xen/{{ board.xen_image }}

"{{ xen.path }}/xen/Makefile":
	@echo "[SBXG/xen] Configuring Xen hypervisor"
{%- if xen.toolchain %}
	PATH="{{ xen.toolchain.path }}/{{ xen.toolchain.prefix | dirname }}:$$PATH" \
{%- endif %}
	cd "{{ xen.path }}" \
		&& \
	./configure \
{%- if xen.toolchain %}
		--host="{{ toolchain.host }}" \
{%- endif %}
		--disable-docs \
		--disable-tools \
		--enable-xen

xen: "{{ xen.path }}/xen/Makefile" $(XEN_IMAGE)

$(XEN_IMAGE):
	@echo "[SBXG/xen] Building Xen hypervisor"
	cp -u "{{ xen.config }}" "{{ xen.path }}/.config"
	+$(call xen-make-helper,)

{% if guests -%}
.PHONY: guests

{%- for guest in guests %}
.PHONY: guest-{{ loop.index0 }}-%

guest-{{ loop.index0 }}-%:
	+$(call {{ guest.kernel.type }}-make-helper,$(patsubst guest-{{ loop.index0 }}-%,%,$@),{{ guest.kernel.path }},{{ guest.kernel.build_dir }})
{% endfor %}

guests:
	{%- for guest in guests %}
	@echo "[SBXG/guests] Building guest #{{ loop.index0 }} ({{ guest.kernel.type }})"
	mkdir -p "{{ guest.kernel.build_dir }}"
	cp -u "{{ guest.kernel.config }}" "{{ guest.kernel.build_dir }}/.config"
	+$(MAKE) guest-{{ loop.index0 }}-zImage
	{%- endfor %}
{% endif %}

{% endif %}{# End of xen #}

.PHONY: kernel

kernel: {{ kernel.type }}

{% else %}
# No kernel specified when bootstrapping...
{% endif %}


#==============================================================================#
#                                U-Boot Targets                                #
#==============================================================================#
{% if uboot %}
# Run make from U-Boot sources.
# $(1): Target(s) name(s) to be called
uboot-make-helper = \
	$(MAKE) \
{%- if kernel and kernel.type == "linux" %}
        DTC="{{ kernel.build_dir }}/scripts/dtc/dtc" \
{%- endif %}
{%- if uboot.toolchain %}
	CROSS_COMPILE={{ uboot.toolchain.path }}/{{ uboot.toolchain.prefix }} \
{%- endif %}
	O={{ uboot.build_dir }} \
	-C {{ uboot.path }} \
	$(1)

.PHONY: uboot uboot-%

UBOOT_IMAGE := {{ uboot.build_dir }}/{{ board.uboot_image }}

uboot-%:
	+$(call uboot-make-helper,$(patsubst uboot-%,%,$@))

uboot: {% if kernel and kernel.type == "linux" %}{{ kernel.build_dir }}/scripts/dtc/dtc{%- endif %} $(UBOOT_IMAGE)

$(UBOOT_IMAGE): {%- if kernel and kernel.type == "linux" %}{{ kernel.build_dir }}/scripts/dtc/dtc{% endif %}
	@echo "[SBXG/uboot] Building u-boot"
	mkdir -p "{{ uboot.build_dir }}"
	cp -u "{{ uboot.config }}" "{{ uboot.build_dir }}/.config"
	+$(call uboot-make-helper,all)

{% else %}
# No u-boot specified when bootstrapping...
{% endif %}

#==============================================================================#
#                                Busybox Targets                               #
#==============================================================================#
{% if busybox %}
.PHONY: busybox busybox-%

busybox-make-helper = \
	$(MAKE) \
{%- if busybox.toolchain %}
	ARCH="{{ busybox.toolchain.arch }}" \
	CROSS_COMPILE="{{ busybox.toolchain.path }}/{{ busybox.toolchain.prefix }}" \
{%- endif %}
	O="{{ busybox.build_dir }}" \
	-C "{{ busybox.path }}" \
	$(1)


busybox-%:
	+$(call busybox-make-helper,$(patsubst busybox-%,%,$@))

busybox:
	@echo "[SBXG/busybox] Building busybox"
	+$(call busybox-make-helper,busybox)
	+$(call busybox-make-helper,install)
	@echo "[SBXG/busybox] Packaging busybox"
	python3 {{ top_source_dir }}/scripts/create-initramfs.py \
            --output "{{ busybox.build_dir }}/initramfs.cpio" \
	    "{{ busybox.build_dir }}"/_install

{% else %}
# No busybox specified when bootstrapping...
{% endif %}

#==============================================================================#
#                               Genimage Targets                               #
#==============================================================================#
{% if genimage %}

{% if guests %}
.PHONY: genimage-guests

guests-genimage: {{ genimage.build_dir }}/genimage
{%- for guest in guests %}
	@echo "[SBXG/guests] Copying image products of guest {{ loop.index0 }}"
	cp -u "{{ guest.kernel.build_dir }}/arch/{{ guest.toolchain.arch }}/boot/{{ guest.linux_image }}" "{{ genimage.input_path }}/guest{{ loop.index0 }}"
	"{{ genimage.build_dir }}/genimage" \
		--outputpath "{{ genimage.output_path }}" \
		--inputpath "{{ genimage.input_path }}/guest{{ loop.index0 }}" \
		--rootpath "{{ genimage.root_path }}" \
		--tmppath "{{ genimage.tmp_path }}" \
		--config "{{ guest.genimage_config }}"
{% endfor %}

{% endif %}

.PHONY: genimage

genimage: {{ genimage.build_dir }}/genimage $(KERNEL_IMAGE) $(UBOOT_IMAGE) {% if xen %}$(XEN_IMAGE){% endif  %}
	@echo "[SBXG/image] Copying image products"
	cp -u "$(KERNEL_IMAGE)" "{{ genimage.input_path }}"
	cp -u "$(KERNEL_DTB)" "{{ genimage.input_path }}"
	cp -u "$(UBOOT_IMAGE)" "{{ genimage.input_path }}"
	{%- if xen %}
	cp -u "$(XEN_IMAGE)" "{{ genimage.input_path }}"
	{%- endif %}
	@echo "[SBXG/image] Generating boot script ({{ board.output_boot_script_name }})"
	"{{ uboot.build_dir }}/tools/mkimage" \
		-C none \
		-A {{ kernel.arch }} \
		-T script \
		-d "{{ top_build_dir }}/{{ board.templated_boot_script_name }}" \
		"{{ genimage.input_path }}/{{ board.output_boot_script_name }}"
	MTOOLS_SKIP_CHECK=1 "{{ genimage.build_dir }}/genimage" \
		--outputpath "{{ genimage.output_path }}" \
		--inputpath "{{ genimage.input_path }}" \
		--rootpath "{{ genimage.root_path }}" \
		--tmppath "{{ genimage.tmp_path }}" \
		--config "{{ genimage.config }}"

{{ genimage.build_dir }}/genimage:
	@echo "[SBXG/image] Building genimage"
	mkdir -p {{ genimage.build_dir }}
	cd "{{ genimage.path }}" && autoreconf -is
	cd "{{ genimage.build_dir }}" && "{{ genimage.path }}/configure"
	+$(MAKE) -C "{{ genimage.build_dir }}"

{% else %}
# Image generation was not specified when bootstrapping...
{% endif %}

.PHONY: help

help:
	@echo "============= SBXG Build Targets ============="
	@echo
	@echo "all           build all available targets"
{%- if uboot %}
	@echo "uboot         build the bootloader"
	@echo "uboot-<cmd>   run the <cmd> target in U-Boot"
{%- endif %}
{%- if kernel %}
	@echo "kernel        build the kernel"
   {%- if kernel.type == "linux" %}
	@echo "linux-<cmd>   run the <cmd> target in Linux"
   {%- endif %}
{%- endif %}
{%- if busybox %}
	@echo "busybox       build busybox"
	@echo "busybox-<cmd> run the <cmd> target in busybox"
{%- endif %}
{%- if genimage %}
	@echo "genimage      compile and execute genimage"
   {%- if guests %}
	@echo "guests-genimage execute genimage for the guests"
   {%- endif %}
{%- endif %}
{%- if xen %}
	@echo "xen           build the xen hypervisor"
	@echo "xen-<cmd>     run the <cmd> target in Xen"
{%- endif %}
